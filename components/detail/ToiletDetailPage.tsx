'use client';

import './DetailPage.css';
import PaperRequestForm from '@/components/detail/PaperRequestForm';
import DeleteCommentButton from './DeleteCommentButton';
import FavoriteButton from '@/components/favorite/FavoriteButton';
import ClientOnlyBackButton from './ClientOnlyBackButton';
import DirectionsButton from '@/components/detail/DirectionsButton';
import { useCallback, useEffect, useRef, useState } from 'react';
import io, { Socket } from 'socket.io-client';

interface Toilet {
  _id: string;
  place_name: string;
  lat: number;
  lng: number;
  keywords?: string[];
  reviews?: {
    _id: string;
    userId: string;
    nickname: string;
    comment: string;
    createdAt: string | Date;
  }[];
  cleanliness?: number;
  facility?: number;
  convenience?: number;
  overallRating?: number;
}

interface ToiletDetailPageProps {
  id: string;
  placeName?: string;
  from?: string;
  /** Î°úÍ∑∏Ïù∏ Í∞ïÏ†ú Ï†ÑÏ†ú */
  currentUserId: string;
  toilet: Toilet;
}

interface ActiveSignal {
  _id: string;
  toiletId: string;
  lat: number;
  lng: number;
  message?: string;
  userId: string;                  // ÏöîÏ≤≠Ïûê
  acceptedByUserId?: string | null;// Íµ¨ÏõêÏûê
  createdAt: string;
  expiresAt: string;
}

type PaperEvent = ActiveSignal;

export default function ToiletDetailPage({
  id,
  placeName = '',
  from = '',
  currentUserId,
  toilet,
}: ToiletDetailPageProps) {
  const rating = typeof toilet.overallRating === 'number' ? toilet.overallRating : 3;
  const encodedName = encodeURIComponent(placeName || toilet.place_name || '');

  const [activeSignals, setActiveSignals] = useState<ActiveSignal[]>([]);
  const socketRef = useRef<Socket | null>(null);

  // 1Ï¥àÎßàÎã§ Í∞ïÏ†ú Î¶¨Î†åÎçî(ÎÇ®ÏùÄ ÏãúÍ∞Ñ Í∞±Ïã†)
  const [, forceTick] = useState(0);
  useEffect(() => {
    const t = setInterval(() => forceTick((v) => v + 1), 1000);
    return () => clearInterval(t);
  }, []);

  // ÎÇ®ÏùÄ ÏãúÍ∞Ñ ÌÖçÏä§Ìä∏
  const timeLeft = (expiresAt: string) => {
    const ms = new Date(expiresAt).getTime() - Date.now();
    if (ms <= 0) return 'ÎßåÎ£å';
    const s = Math.floor(ms / 1000);
    const m = Math.floor(s / 60);
    const rs = s % 60;
    return m > 0 ? `${m}Î∂Ñ ${rs}Ï¥à ÎÇ®Ïùå` : `${rs}Ï¥à ÎÇ®Ïùå`;
  };

  // ÎÇ¥ Í∏Ä/ÎÇ¥Í∞Ä ÏàòÎùΩ Ïó¨Î∂Ä
  const isMine = (sig: ActiveSignal) => sig.userId === currentUserId;
  const isAcceptedByMe = (sig: ActiveSignal) => sig.acceptedByUserId === currentUserId;

  // ÏàòÎùΩ/Ï∑®ÏÜå ÎùºÎ≤®
  const acceptedLabel = (sig: ActiveSignal): string => {
    if (!sig.acceptedByUserId) return '';
    if (isAcceptedByMe(sig)) return 'ÎÇ¥Í∞Ä Í∞ÄÎäî Ï§ë';
    const short = sig.acceptedByUserId.slice(-4);
    return `Íµ¨ÏõêÏûê: ****${short}`;
  };

  // ‚úÖ ÏÑúÎ≤Ñ Î™©Î°ùÍ≥º temp-* Ïπ¥ÎìúÎ•º "Î®∏ÏßÄ"Ìï¥ÏÑú Î∞òÏòÅ (ÎîîÏûêÏù∏ Î∂àÎ≥Ä)
  const mergeAndSet = useCallback((incoming: ActiveSignal[]) => {
    setActiveSignals((prev) => {
      const temps = prev.filter((x) => x._id.startsWith('temp-'));
      const byId = new Map<string, ActiveSignal>();
      for (const it of incoming) byId.set(it._id, it);
      for (const t of temps) if (!byId.has(t._id)) byId.set(t._id, t);
      const arr = Array.from(byId.values());
      arr.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
      return arr;
    });
  }, []);

  // ÏÑúÎ≤Ñ ÏÉÅÌÉú Í∞ÄÏ†∏Ïò§Í∏∞ ‚Üí Î∞òÎìúÏãú merge ÏÇ¨Ïö©
  const fetchActive = useCallback(async () => {
    try {
      const resp = await fetch(`/api/signal/active?toiletIds=${encodeURIComponent(id)}`, { cache: 'no-store' });
      if (!resp.ok) return;
      const data = (await resp.json()) as { ok?: true; items?: ActiveSignal[] };
      mergeAndSet(data.items ?? []);
    } catch {
      /* ignore */
    }
  }, [id, mergeAndSet]);

  // üîπ ÏòµÌã∞ÎØ∏Ïä§Ìã±: Ìèº Ï†úÏ∂ú ÏãúÏûë Ïãú ÏûÑÏãú Ïπ¥Îìú Ï¶âÏãú Ï∂îÍ∞Ä (DOM Î≥ÄÍ≤Ω ÏóÜÏùå)
  const onCreateStart = useCallback((p: { message?: string }): { tempId: string } => {
    const tempId = `temp-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;
    const nowIso = new Date().toISOString();
    const expIso = new Date(Date.now() + 10 * 60 * 1000).toISOString();
    const tempCard: ActiveSignal = {
      _id: tempId,
      toiletId: id,
      lat: toilet.lat,
      lng: toilet.lng,
      message: p.message?.trim() || undefined,
      userId: currentUserId,
      acceptedByUserId: null,
      createdAt: nowIso,
      expiresAt: expIso,
    };
    setActiveSignals((prev) => [tempCard, ...prev]);
    return { tempId };
  }, [id, toilet.lat, toilet.lng, currentUserId]);

  // ÏÑ±Í≥µ Ïãú temp ‚Üí Ïã§Ï†ú Ïπ¥Îìú ÍµêÏ≤¥
  const onCreateSuccess = useCallback((args: { tempId: string; id: string; expiresAt: string; message?: string }) => {
    setActiveSignals((prev) => {
      const next = prev.filter((s) => s._id !== args.tempId && s._id !== args.id);
      const real: ActiveSignal = {
        _id: args.id,
        toiletId: id,
        lat: toilet.lat,
        lng: toilet.lng,
        message: args.message?.trim() || undefined,
        userId: currentUserId,
        acceptedByUserId: null,
        createdAt: new Date().toISOString(),
        expiresAt: args.expiresAt,
      };
      return [real, ...next];
    });
  }, [id, toilet.lat, toilet.lng, currentUserId]);

  // Ïã§Ìå® Ïãú temp Ï†úÍ±∞
  const onCreateError = useCallback((tempId: string) => {
    setActiveSignals((prev) => prev.filter((s) => s._id !== tempId));
  }, []);

  // ÏÜåÏºì Ïó∞Í≤∞ (ÎîîÏûêÏù∏ Î∂àÎ≥Ä)
  useEffect(() => {
    let cancelled = false;

    const boot = async () => {
      await fetch('/api/socketio-init').catch(() => {});
      if (cancelled) return;

      const s = io({ path: '/api/socket', transports: ['websocket'] });
      socketRef.current = s;

      s.on('connect', () => {
        s.emit('join_toilet', id);
        s.emit('join_user', currentUserId);
      });

      // ÏÑúÎ≤Ñ pushÎäî Ï¶âÏãú upsert (refetch ÏóÜÏù¥)
      s.on('paper_request', (payload: PaperEvent) => {
        setActiveSignals((prev) => {
          const filtered = prev.filter((x) => x._id !== payload._id);
          return [payload, ...filtered];
        });
      });

      // ÎÇòÎ®∏ÏßÄÎäî Î≥¥ÏàòÏ†ÅÏúºÎ°ú Ïû¨Ï°∞Ìöå(mergeÍ∞Ä temp Ïú†ÏßÄ)
      const refetch = () => fetchActive();
      s.on('paper_accepted', refetch);
      s.on('paper_accept_canceled', refetch);
      s.on('paper_canceled', refetch);
      s.on('signals_changed', refetch);

      s.onAny((event: string) => {
        const e = event.toLowerCase();
        if (e.includes('paper') || e.includes('signal') || e.includes('accept') || e.includes('cancel')) {
          refetch();
        }
      });
    };

    fetchActive();
    boot();

    return () => {
      cancelled = true;
      const s = socketRef.current;
      if (s) {
        s.emit('leave_toilet', id);
        s.emit('leave_user', currentUserId);
        s.removeAllListeners();
        s.disconnect();
      }
    };
  }, [id, currentUserId, fetchActive]);

  // ÏÜåÏºì ÎàÑÎùΩ ÎåÄÎπÑ: ÌôúÏÑ± Ïã†Ìò∏Í∞Ä ÏûàÏúºÎ©¥ 3Ï¥à Ìè¥ÎßÅ(merge Ïú†ÏßÄ)
  useEffect(() => {
    if (activeSignals.length === 0) return;
    const t = setInterval(fetchActive, 3000);
    return () => clearInterval(t);
  }, [activeSignals.length, fetchActive]);

  // ÏàòÎùΩ/Ï∑®ÏÜå/ÏöîÏ≤≠Ï∑®ÏÜå (ÏòµÌã∞ÎØ∏Ïä§Ìã± + Ïã§Ìå® Î°§Î∞±)
  async function accept(signalId: string) {
    const rollback = activeSignals;
    setActiveSignals((prev) =>
      prev.map((s) => (s._id === signalId ? { ...s, acceptedByUserId: currentUserId } : s))
    );

    const r = await fetch('/api/signal/accept', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ signalId }),
      credentials: 'same-origin',
    });

    if (!r.ok) {
      setActiveSignals(rollback);
      const e = (await r.json().catch(() => ({}))) as { error?: string };
      alert(e.error ?? 'ÏàòÎùΩ Ïã§Ìå®');
      return;
    }
    fetchActive();
  }

  async function cancelAccept(signalId: string) {
    const rollback = activeSignals;
    setActiveSignals((prev) =>
      prev.map((s) => (s._id === signalId ? { ...s, acceptedByUserId: null } : s))
    );

    const r = await fetch('/api/signal/accept-cancel', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ signalId }),
      credentials: 'same-origin',
    });

    if (!r.ok) {
      setActiveSignals(rollback);
      const e = (await r.json().catch(() => ({}))) as { error?: string };
      alert(e.error ?? 'Ï∑®ÏÜå Ïã§Ìå®');
      return;
    }
    fetchActive();
  }

  async function cancelMyRequest(signalId: string) {
    const rollback = activeSignals;
    setActiveSignals((prev) => prev.filter((s) => s._id !== signalId));

    const r = await fetch('/api/signal/cancel', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ signalId }),
      credentials: 'same-origin',
    });
    if (!r.ok) {
      setActiveSignals(rollback);
      const e = (await r.json().catch(() => ({}))) as { error?: string };
      alert(e.error ?? 'ÏöîÏ≤≠ Ï∑®ÏÜå Ïã§Ìå®');
      return;
    }
    fetchActive();
  }

  // ÏãúÍ∞Ñ Í≤ΩÍ≥º Ìè¨Îß∑
  const formatTimeAgo = (date: string | Date) => {
    const now = Date.now();
    const then = new Date(date).getTime();
    const diffSec = Math.floor((now - then) / 1000);
    if (diffSec < 60) return `${diffSec}Ï¥à Ï†Ñ`;
    const diffMin = Math.floor(diffSec / 60);
    if (diffMin < 60) return `${diffMin}Î∂Ñ Ï†Ñ`;
    const diffHour = Math.floor(diffMin / 60);
    if (diffHour < 24) return `${diffHour}ÏãúÍ∞Ñ Ï†Ñ`;
    const diffDay = Math.floor(diffHour / 24);
    if (diffDay < 30) return `${diffDay}Ïùº Ï†Ñ`;
    const diffMonth = Math.floor(diffDay / 30);
    if (diffMonth < 12) return `${diffMonth}Í∞úÏõî Ï†Ñ`;
    const diffYear = Math.floor(diffDay / 365);
    return `${diffYear}ÎÖÑ Ï†Ñ`;
  };

  // ‚¨áÔ∏è ÏïÑÎûòÎ∂ÄÌÑ∞Îäî ‚ÄúÏ≤òÏùå ÎîîÏûêÏù∏‚ÄùÏùò ÎßàÌÅ¨ÏóÖ/ÌÅ¥ÎûòÏä§ Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
  return (
    <div className="detail-page">
      <ClientOnlyBackButton />

      {/* Ìó§Îçî */}
      <div className="detail-header">
        <div className="favorite-wrapper">
          <FavoriteButton toiletId={id} placeName={toilet.place_name} />
        </div>
        <h2>{toilet.place_name}</h2>
        <div className="rating">
          {'‚òÖ'.repeat(Math.round(rating)).padEnd(5, '‚òÜ')} ({rating.toFixed(1)})
        </div>

        <div className="btn-group">
          <a href={`/toilet/${id}/keywords?place_name=${encodedName}${from ? `&from=${from}` : ''}`}>
            ÌÇ§ÏõåÎìú Ï∂îÍ∞ÄÌïòÍ∏∞
          </a>
          <a href={`/toilet/${id}/rate?place_name=${encodedName}${from ? `&from=${from}` : ''}`}>
            Î≥ÑÏ†ê Ï∂îÍ∞ÄÌïòÍ∏∞
          </a>
          <DirectionsButton placeName={toilet.place_name} lat={toilet.lat} lng={toilet.lng} />
        </div>
      </div>

      {/* ÌôúÏÑ± ÏöîÏ≤≠ Î∞ïÏä§ */}
      {activeSignals.length > 0 && (
        <div className="active-requests">
          <div className="active-title">ÏöîÏ≤≠ Ïã†Ìò∏</div>
          <ul className="active-list">
            {activeSignals.map((s) => (
              <li key={s._id} className="active-item">
                <div className="active-msg">
                  {s.message ?? 'Î©îÏãúÏßÄ ÏóÜÏùå'}
                  {s.acceptedByUserId && (
                    <div style={{ color: '#4E3CDB', fontWeight: 600, marginTop: 4 }}>
                      {acceptedLabel(s)}
                    </div>
                  )}
                </div>

                <div className="active-meta" style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                  <span>{timeLeft(s.expiresAt)}</span>

                  {/* ÏöîÏ≤≠Ïûê: Î≥∏Ïù∏ Í∏ÄÏù¥Î©¥ ÏöîÏ≤≠ Ï∑®ÏÜå Î≤ÑÌäº */}
                  {isMine(s) && (
                    <button className="action-btn" onClick={() => cancelMyRequest(s._id)}>
                      ÏöîÏ≤≠ Ï∑®ÏÜå
                    </button>
                  )}

                  {/* ÌÉÄÏù∏ Í∏Ä: ÎØ∏ÏàòÎùΩ/ÎÇ¥Í∞Ä ÏàòÎùΩ */}
                  {!isMine(s) && !s.acceptedByUserId && (
                    <button className="action-btn" onClick={() => accept(s._id)}>
                      Í∞àÍªòÏöî
                    </button>
                  )}
                  {!isMine(s) && isAcceptedByMe(s) && (
                    <button className="action-btn" onClick={() => cancelAccept(s._id)}>
                      Í∞àÍªòÏöî Ï∑®ÏÜå
                    </button>
                  )}
                </div>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Ìú¥ÏßÄ ÏöîÏ≤≠ ÎèÖÎ¶Ω Ïπ¥Îìú */}
      <div className="request-card">
        <div className="request-title">Ìú¥ÏßÄ ÏöîÏ≤≠ Î≥¥ÎÇ¥Í∏∞</div>
        <div className="request-row">
          <PaperRequestForm
            toiletId={id}
            lat={toilet.lat}
            lng={toilet.lng}
            userId={currentUserId}
            onCreateStart={onCreateStart}     // ‚úÖ Î°úÏßÅÎßå Ï∂îÍ∞Ä, ÎîîÏûêÏù∏ Í∑∏ÎåÄÎ°ú
            onCreateSuccess={onCreateSuccess}
            onCreateError={onCreateError}
          />
        </div>
        <div className="request-hint">
          Ïòà: ÎÇ®Ïûê ÌôîÏû•Ïã§ 2Î≤àÏß∏ Ïπ∏ÏûÖÎãàÎã§. (ÏµúÎåÄ 120Ïûê)
        </div>
      </div>

      {/* ÏÇ¨Ïö©ÏûêÎì§Ïùò ÌèâÍ∑† Ï†êÏàò */}
      <div className="tags-box">
        ÏÇ¨Ïö©ÏûêÎì§Ïùò ÌèâÍ∑† Ï†êÏàò
        <div>Ï≤≠Í≤∞: {toilet.cleanliness}Ï†ê</div>
        <div>ÏãúÏÑ§: {toilet.facility}Ï†ê</div>
        <div>Ìé∏Ïùò: {toilet.convenience}Ï†ê</div>
      </div>

      {/* ÌÇ§ÏõåÎìú */}
      {toilet.keywords?.length ? (
        <div className="keyword-box">
          {toilet.keywords.map((kw, idx) => (
            <span key={idx} className="tag">
              #{kw}
            </span>
          ))}
        </div>
      ) : (
        <div className="keyword-box">
          <p style={{ marginTop: '1rem' }}>Îì±Î°ùÎêú ÌÇ§ÏõåÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>
        </div>
      )}

      {/* ÎåìÍ∏Ä */}
      <div className="reviews">
        <h3>ÎåìÍ∏Ä</h3>
        {toilet.reviews?.length ? (
          toilet.reviews
            .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
            .map((r) => (
              <div key={r._id} className="comment-item">
                <div className="comment-content">
                  <div className="comment-main">
                    <strong className="nickname">{r.nickname}</strong>
                    <span className="comment-text">{r.comment}</span>
                  </div>

                  <div className="comment-right">
                    <span className="comment-date">{formatTimeAgo(r.createdAt)}</span>
                    {r.userId === currentUserId && (
                      <DeleteCommentButton toiletId={id} commentId={r._id} />
                    )}
                  </div>
                </div>
              </div>
            ))
        ) : (
          <p>ÏïÑÏßÅ Îì±Î°ùÎêú ÎåìÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.</p>
        )}
      </div>

      <a
        className="comment-btn"
        href={`/toilet/${id}/comment?place_name=${encodedName}${from ? `&from=${from}` : ''}`}
      >
        ÎåìÍ∏Ä Ï∂îÍ∞ÄÌïòÍ∏∞
      </a>
    </div>
  );
}
